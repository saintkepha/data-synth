// Generated by CoffeeScript 1.9.1
(function() {
  var RelationshipProperty, StormClass, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormClass = require('../class');

  assert = require('assert');

  RelationshipProperty = (function(superClass) {
    extend(RelationshipProperty, superClass);

    RelationshipProperty.set({
      storm: 'relation'
    });

    RelationshipProperty.prototype.kind = null;

    function RelationshipProperty(model, opts, obj) {
      var ref, type;
      this.model = model;
      if (opts == null) {
        opts = {};
      }
      assert(typeof ((ref = this.model) != null ? ref.constructor : void 0) === 'function', "cannot register a new relationship without proper model class");
      assert(obj instanceof StormClass, "cannot register a new relationship without containing obj defined");
      type = (function() {
        switch (this.kind) {
          case 'belongsTo':
            return 'string';
          case 'hasMany':
            return 'array';
        }
      }).call(this);
      if (this.kind === 'hasMany') {
        opts.unique = true;
      }
      RelationshipProperty.__super__.constructor.call(this, type, opts, obj);
    }

    return RelationshipProperty;

  })(require('../property'));

  module.exports = RelationshipProperty;

}).call(this);
