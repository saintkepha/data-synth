// Generated by CoffeeScript 1.9.1
(function() {
  var ComputedProperty, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('assert');

  ComputedProperty = (function(superClass) {
    extend(ComputedProperty, superClass);

    ComputedProperty.set({
      storm: 'computed'
    });

    ComputedProperty.prototype.kind = 'computed';


    /**
     * @property func
     * @default null
     */

    ComputedProperty.func = function() {
      return null;
    };

    function ComputedProperty(func, opts, obj) {
      var ref, ref1, type;
      this.func = func;
      if (opts == null) {
        opts = {};
      }
      console.log('computed');
      console.log(this.func);
      assert(typeof this.func === 'function', "cannot register a new ComputedProperty without a function");
      type = (ref = opts.type) != null ? ref : 'computed';
      ComputedProperty.__super__.constructor.call(this, type, opts, obj);
      this.cache = (ref1 = opts.cache) != null ? ref1 : 0;
      if (this.cache > 0) {
        this.cachedOn = new Date();
      }
    }

    ComputedProperty.prototype.isCachedValid = function() {
      return this.cache > 0 && (new Date() - this.cachedOn) / 1000 < this.cache;
    };

    ComputedProperty.prototype.get = function() {
      if (!((this.value != null) && this.isCachedValid())) {
        this.set(this.func.call(this.obj));
        if (this.cache > 0) {
          this.cachedOn = new Date();
        }
      }
      return ComputedProperty.__super__.get.apply(this, arguments);
    };

    ComputedProperty.prototype.serialize = function() {
      return ComputedProperty.__super__.serialize.call(this, this.get());
    };

    return ComputedProperty;

  })(require('../property'));

  module.exports = ComputedProperty;

}).call(this);
