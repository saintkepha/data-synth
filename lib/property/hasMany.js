// Generated by CoffeeScript 1.9.1
(function() {
  var BelongsToProperty, HasManyProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BelongsToProperty = require('./belongsTo');

  HasManyProperty = (function(superClass) {
    extend(HasManyProperty, superClass);

    function HasManyProperty() {
      return HasManyProperty.__super__.constructor.apply(this, arguments);
    }

    HasManyProperty.set({
      storm: 'hasMany'
    });

    HasManyProperty.prototype.kind = 'hasMany';

    HasManyProperty.prototype.get = function() {
      return (HasManyProperty.__super__.get.apply(this, arguments).map((function(_this) {
        return function(e) {
          return _this.model.prototype.fetch(e);
        };
      })(this))).filter(function(e) {
        return e != null;
      });
    };

    HasManyProperty.prototype.push = function(value) {
      var list;
      list = this.get();
      list.push(value);
      return this.set(list);
    };

    HasManyProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      return (HasManyProperty.__super__.validate.call(this, value)) === true && value.every((function(_this) {
        return function(e) {
          return (_this.model.prototype.fetch(e)) instanceof _this.model;
        };
      })(this));
    };

    HasManyProperty.prototype.normalize = function(value) {
      value = HasManyProperty.__super__.normalize.call(this, value);
      return HasManyProperty.__super__.normalize.call(this, (function() {
        switch (false) {
          case !(value instanceof Array):
            return (value.filter(function(e) {
              return e != null;
            })).map((function(_this) {
              return function(e) {
                return BelongsToProperty.prototype.normalize.call(_this, e);
              };
            })(this));
          default:
            return void 0;
        }
      }).call(this));
    };

    HasManyProperty.prototype.serialize = function(format) {
      if (format == null) {
        format = 'json';
      }
      if (this.opts.embedded === true) {
        return this.get().map(function(e) {
          return e.serialize(format);
        });
      } else {
        return HasManyProperty.__super__.serialize.apply(this, arguments);
      }
    };

    return HasManyProperty;

  })(require('./relationship'));

  module.exports = HasManyProperty;

}).call(this);
