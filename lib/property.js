// Generated by CoffeeScript 1.9.1
(function() {
  var PropertyValidationError, StormClass, StormProperty, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormClass = require('./class');

  PropertyValidationError = (function(superClass) {
    extend(PropertyValidationError, superClass);

    function PropertyValidationError() {
      return PropertyValidationError.__super__.constructor.apply(this, arguments);
    }

    return PropertyValidationError;

  })(Error);

  assert = require('assert');

  StormProperty = (function(superClass) {
    extend(StormProperty, superClass);

    StormProperty.set({
      storm: 'property'
    });

    StormProperty.prototype.kind = 'attr';

    function StormProperty(type, opts1, obj) {
      var base, base1;
      this.type = type;
      this.opts = opts1 != null ? opts1 : this.constructor.meta;
      this.obj = obj;
      assert(this.obj instanceof (require('./object')), "cannot register a new property without a reference to an object it belongs to");
      if ((base = this.opts).required == null) {
        base.required = false;
      }
      if ((base1 = this.opts).unique == null) {
        base1.unique = false;
      }

      /**
       * @property value
       */
      this.value = void 0;

      /**
       * @property isDirty
       * @default false
       */
      this.isDirty = false;
    }

    StormProperty.prototype.get = function() {
      if (this.value instanceof StormProperty) {
        return this.value.get();
      } else {
        return this.value;
      }
    };

    StormProperty.prototype.set = function(value, opts) {
      var ArrayEquals, cval, nval;
      if (opts == null) {
        opts = {};
      }
      ArrayEquals = function(a, b) {
        return a.length === b.length && a.every(function(elem, i) {
          return elem === b[i];
        });
      };
      if (value == null) {
        value = (function() {
          switch (false) {
            case typeof this.opts.defaultValue !== 'function':
              return this.opts.defaultValue.call(this.obj);
            default:
              return this.opts.defaultValue;
          }
        }).call(this);
      }
      cval = this.value;
      nval = this.normalize(value);
      if (nval instanceof Array && nval.length > 0) {
        nval = nval.filter(function(e) {
          return e != null;
        });
        if (this.opts.unique === true) {
          nval = nval.unique();
        }
      }
      if (!(opts.skipValidation === true || this.validate(nval))) {
        return new PropertyValidationError(nval);
      }
      this.isDirty = (function() {
        switch (false) {
          case !((cval == null) && (nval != null)):
            return true;
          case this.type !== 'array':
            return !ArrayEquals(cval, nval);
          case cval !== nval:
            return false;
          default:
            return true;
        }
      }).call(this);
      if (this.isDirty === true) {
        this.value = nval;
      }
      return this;
    };

    StormProperty.prototype.validate = function(value) {
      if (value == null) {
        value = this.value;
      }
      if (typeof this.opts.validator === 'function') {
        return this.opts.validator.call(this.obj, value);
      }
      if (value == null) {
        return this.opts.required === false;
      }
      if (value instanceof StormProperty) {
        value = value.get();
      }
      switch (this.type) {
        case 'string' || 'number' || 'boolean' || 'object':
          return typeof value === this.type;
        case 'date':
          return value instanceof Date;
        case 'array':
          return value instanceof Array;
        default:
          return true;
      }
    };

    StormProperty.prototype.normalize = function(value) {
      switch (false) {
        case !(value instanceof Object && typeof value.stormify === 'function'):
          return value.stormify.call(this.obj);
        case !(this.type === 'date' && typeof value === 'string'):
          return new Date(value);
        case !(this.type === 'array' && !(value instanceof Array)):
          if (value != null) {
            return [value];
          } else {
            return [];
          }
          break;
        default:
          return value;
      }
    };

    StormProperty.prototype.serialize = function(format) {
      if (format == null) {
        format = 'json';
      }
      switch (false) {
        case typeof this.opts.serializer !== 'function':
          return this.opts.serializer.call(this.obj, this.value, format);
        case !(this.value instanceof StormProperty):
          return this.value.serialize(format);
        default:
          return this.value;
      }
    };

    return StormProperty;

  })(StormClass);

  module.exports = StormProperty;

}).call(this);
